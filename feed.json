{
    "version": "https://jsonfeed.org/version/1",
    "title": "时光∞记忆碎片",
    "description": "Starlight spread the universe",
    "home_page_url": "https://killer1214.github.io",
    "items": [
        {
            "id": "https://killer1214.github.io/2023/04/03/c-base-learn/",
            "url": "https://killer1214.github.io/2023/04/03/c-base-learn/",
            "title": "c++base_learn",
            "date_published": "2023-04-03T13:14:48.000Z",
            "content_html": "<h1 id=\"c基础\"><a class=\"anchor\" href=\"#c基础\">#</a> c++ 基础</h1>\n<h2 id=\"1c了解\"><a class=\"anchor\" href=\"#1c了解\">#</a> 1.c++ 了解</h2>\n<h2 id=\"2数据类型\"><a class=\"anchor\" href=\"#2数据类型\">#</a> 2. 数据类型</h2>\n<h3 id=\"25-转义字符\"><a class=\"anchor\" href=\"#25-转义字符\">#</a> 2.5 转义字符</h3>\n<ul>\n<li>\n<p>\\t 水平制表（HT）（跳到下一个 tab 位置，一个 tab 占 8 个位置）009</p>\n</li>\n<li>\n<p>\\n 换行（LF）010</p>\n</li>\n<li>\n<p>\\r 回车（CR）回到当前行开头 013</p>\n</li>\n</ul>\n<h3 id=\"26字符串型\"><a class=\"anchor\" href=\"#26字符串型\">#</a> 2.6 字符串型</h3>\n<p>作用：表示一串字符</p>\n<h4 id=\"1c风格字符串char-变量名-字符串值\"><a class=\"anchor\" href=\"#1c风格字符串char-变量名-字符串值\">#</a> 1.C 风格字符串： <code>char 变量名[] = &quot;字符串值&quot;</code></h4>\n<p>例如： <code>char str1[] = &quot;hello,world&quot;;</code></p>\n<h4 id=\"2c风格字符串string-变量名-字符串值\"><a class=\"anchor\" href=\"#2c风格字符串string-变量名-字符串值\">#</a> 2.c++ 风格字符串： <code>string 变量名 = &quot;字符串值&quot;</code></h4>\n<p>例如： <code>string str2 = &quot;hello world&quot;;</code></p>\n<p><strong>注意</strong>：需要包含头文件 <code>#include &lt;string&gt;</code></p>\n<h3 id=\"27布尔类型bool\"><a class=\"anchor\" href=\"#27布尔类型bool\">#</a> 2.7 布尔类型 bool</h3>\n<p><strong>作用</strong>：布尔数据类型代表真或假的值</p>\n<p>bool 类型只有两个值：</p>\n<ul>\n<li>\n<p>true ----- 真（本质是 1）// 非零值都代表真</p>\n</li>\n<li>\n<p>false----- 假（本质是 0）</p>\n</li>\n</ul>\n<p>bool 类型占 1 个字节大小</p>\n<p>示例： <code>bool flag = true;//true代表真，此时flag==1</code></p>\n<h3 id=\"28数据的输入\"><a class=\"anchor\" href=\"#28数据的输入\">#</a> 2.8 数据的输入</h3>\n<p>作用：从键盘获取数据</p>\n<p>关键字：cin</p>\n<p>语法： <code>cin &gt;&gt; 变量</code></p>\n<h2 id=\"3运算符\"><a class=\"anchor\" href=\"#3运算符\">#</a> 3. 运算符</h2>\n<p>作用：用于执行代码的运算</p>\n<table>\n<thead>\n<tr>\n<th>运算符类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算数运算符</td>\n<td>处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>根据表达式的值返回真值或假值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"31算数运算符\"><a class=\"anchor\" href=\"#31算数运算符\">#</a> 3.1 算数运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>术语</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>2+3</td>\n<td>5</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>5-2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>2*3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除以</td>\n<td>10/5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模（取余）</td>\n<td>10%3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2;b=++a;</td>\n<td>a=3;b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2;b=a++;</td>\n<td>a=3;b=2;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>前置递减</td>\n<td>a=2;b=--a;</td>\n<td>a=1;b=1;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>后置递减</td>\n<td>a=2;b=a--;</td>\n<td>a=1;b=2;</td>\n</tr>\n</tbody>\n</table>\n<p>注意：</p>\n<ul>\n<li>\n<p>两个整数相除，结果依然是<strong>整数</strong>，将小数部分去除</p>\n</li>\n<li>\n<p>除数不能是 0</p>\n</li>\n<li>\n<p>小数除法运算，结果优先显示为整数（小数部分为零时省略显示）</p>\n</li>\n<li>\n<p>两个小数不允许做取模运算</p>\n</li>\n<li>\n<p>前置：先对变量处理，然后进行表达式运算；后置：先进行表达式运算，然后对变量处理</p>\n</li>\n</ul>\n<h3 id=\"32赋值运算符\"><a class=\"anchor\" href=\"#32赋值运算符\">#</a> 3.2 赋值运算符</h3>\n<p>作用：将表达式的值赋给变量</p>\n<p>运算符： <code>=，+=，-=，*=，/=，%=</code></p>\n<h3 id=\"33比较运算符\"><a class=\"anchor\" href=\"#33比较运算符\">#</a> 3.3 比较运算符</h3>\n<p>作用：用于表达式的比较，并返回一个真值（1）或假值（0）</p>\n<p>运算符： <code>==，!=，&lt;，&gt;，&lt;=，&gt;=</code></p>\n<h3 id=\"34逻辑运算符\"><a class=\"anchor\" href=\"#34逻辑运算符\">#</a> 3.4 逻辑运算符</h3>\n<p>作用：用于根据表达式的值返回真值或假值</p>\n<p>运算符： <code>!,&amp;&amp;,||</code></p>\n<h2 id=\"4程序流程结构\"><a class=\"anchor\" href=\"#4程序流程结构\">#</a> 4. 程序流程结构</h2>\n<p>顺序结构，选择结构，循环结构</p>\n<ul>\n<li>\n<p>顺序结构：程序顺序执行，不发生跳转</p>\n</li>\n<li>\n<p>选择结构：依据条件是否满足，有选择 的执行相应功能</p>\n</li>\n<li>\n<p>循环结构：依据条件是否满足，循环多次执行某段代码</p>\n</li>\n</ul>\n<h3 id=\"41选择结构\"><a class=\"anchor\" href=\"#41选择结构\">#</a> 4.1 选择结构</h3>\n<h4 id=\"411-if语句\"><a class=\"anchor\" href=\"#411-if语句\">#</a> 4.1.1 if 语句</h4>\n<p>if 语句的三种形式：</p>\n<ul>\n<li>\n<p>单行格式 if 语句（无 else）</p>\n</li>\n<li>\n<p>多行格式 if 语句（有 else）</p>\n</li>\n<li>\n<p>多条件的 if 语句</p>\n</li>\n</ul>\n<h4 id=\"412三目运算符\"><a class=\"anchor\" href=\"#412三目运算符\">#</a> 4.1.2 三目运算符</h4>\n<p>作用：通过三目运算符实现简单的判断</p>\n<p>语法： <code>表达式1?表达式2:表达式3</code></p>\n<p>如果表达式 1 为<strong>真</strong>，则执行<strong>表达式 2</strong>，并返回表达式 2 的结果</p>\n<p>如果表达式 1 为<strong>假</strong>，则执行<strong>表达式 3</strong>，并返回表达式 3 的结果</p>\n<p>补充：在 C++ 中三目运算符返回的是变量，可以继续赋值</p>\n<p>例如： <code>(a &gt; b ? a : b) = 100</code></p>\n<h4 id=\"413switch语句\"><a class=\"anchor\" href=\"#413switch语句\">#</a> 4.1.3switch 语句</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> 结果<span class=\"token number\">1</span><span class=\"token operator\">:</span>执行语句<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">case</span> 结果<span class=\"token number\">2</span><span class=\"token operator\">:</span>执行语句<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>执行语句<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：case 里如果没有 break，那么程序会一直向下执行</p>\n<p><strong>if 和 switch 区别：</strong></p>\n<ul>\n<li>\n<p>switch 缺点，判断的时候只能是整型或者字符型，不可以是一个区间</p>\n</li>\n<li>\n<p>switch 优点，结构清晰执行效率高</p>\n</li>\n</ul>\n<h3 id=\"42循环结构\"><a class=\"anchor\" href=\"#42循环结构\">#</a> 4.2 循环结构</h3>\n<h4 id=\"421while循环语句\"><a class=\"anchor\" href=\"#421while循环语句\">#</a> 4.2.1while 循环语句</h4>\n<p>语法： <code>while(循环条件)&#123;循环语句&#125;</code></p>\n<p>只要循环条件结果为真，就执行循环语句</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 依据当前系统时间来添加随机数种子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 需要 ctime 头文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成 1~100 随机数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"422-dowhile循环语句\"><a class=\"anchor\" href=\"#422-dowhile循环语句\">#</a> 4.2.2 do...while 循环语句</h4>\n<p>语法： <code>do&#123;循环语句&#125;while(循环条件)</code></p>\n<p>注意：与 while 的区别在于 do...while 会先执行一次循环语句，再判断循环条件</p>\n<h4 id=\"423-for循环语句\"><a class=\"anchor\" href=\"#423-for循环语句\">#</a> 4.2.3 for 循环语句</h4>\n<p>语法： <code>for(起始表达式;条件表达式;末尾循环体)&#123;循环语句&#125;</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 敲桌子，1~100 内，各位 7 (mod10=7)，</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>十位 7 (/10 = 7)，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>或者是 7 的倍数 (mod7=0)，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>则输出敲桌子 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">7</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token operator\">==</span><span class=\"token number\">7</span><span class=\"token operator\">||</span>i<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">==</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"敲桌子\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"424嵌套循环\"><a class=\"anchor\" href=\"#424嵌套循环\">#</a> 4.2.4 嵌套循环</h4>\n<h3 id=\"43跳转语句\"><a class=\"anchor\" href=\"#43跳转语句\">#</a> 4.3 跳转语句</h3>\n<h4 id=\"431-break语句\"><a class=\"anchor\" href=\"#431-break语句\">#</a> 4.3.1 break 语句</h4>\n<p>作用：跳出选择结构或者循环结构</p>\n<p>break 使用的时机：</p>\n<ul>\n<li>\n<p>switch 条件语句中，终止 case 并跳出 switch</p>\n</li>\n<li>\n<p>循环语句中，跳出当前的循环语句</p>\n</li>\n<li>\n<p>嵌套循环中，跳出最近的内层循环语句</p>\n</li>\n</ul>\n<h4 id=\"432-continue语句\"><a class=\"anchor\" href=\"#432-continue语句\">#</a> 4.3.2 continue 语句</h4>\n<p>作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<h4 id=\"433-goto语句\"><a class=\"anchor\" href=\"#433-goto语句\">#</a> 4.3.3 goto 语句</h4>\n<p>作用：可以<strong>无条件</strong>跳转语句</p>\n<p>语法： <code>goto 标记;</code> (标记习惯用全大写)</p>\n<p>解释：如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">goto</span> FLAG<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FLAG<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"5-数组\"><a class=\"anchor\" href=\"#5-数组\">#</a> 5 数组</h2>\n<h3 id=\"51-概述\"><a class=\"anchor\" href=\"#51-概述\">#</a> 5.1 概述</h3>\n<p>数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p><strong>特点 1</strong>：数组中的每个数据元素都是相同的数据类型</p>\n<p><strong>特点 2</strong>：数组是由连续的内存位置组成的</p>\n<h3 id=\"52-一维数组\"><a class=\"anchor\" href=\"#52-一维数组\">#</a> 5.2 一维数组</h3>\n<h4 id=\"521-一维数组定义方式\"><a class=\"anchor\" href=\"#521-一维数组定义方式\">#</a> 5.2.1 一维数组定义方式</h4>\n<p>三种方式：</p>\n<ol>\n<li>\n<p><code>数据类型 数组名[数组长度];</code></p>\n</li>\n<li>\n<p><code>数据类型 数组名[数组长度] = &#123;值1, 值2...&#125;;</code> (没有全部初始化的后续空间会用 0 填补)</p>\n</li>\n<li>\n<p><code>数据类型 数组名[] = &#123;值1, 值2...&#125;;</code></p>\n</li>\n</ol>\n<h4 id=\"522-一维数组数组名\"><a class=\"anchor\" href=\"#522-一维数组数组名\">#</a> 5.2.2 一维数组数组名</h4>\n<p>用途：</p>\n<ol>\n<li>\n<p>统计整个数组在内存中的长度 <code>sizeof(数组名)</code></p>\n</li>\n<li>\n<p>获取数组在内存中的首地址 <code>cout &lt;&lt; 数组名</code></p>\n</li>\n</ol>\n<h4 id=\"523-冒泡排序\"><a class=\"anchor\" href=\"#523-冒泡排序\">#</a> 5.2.3 冒泡排序</h4>\n<ul>\n<li>\n<p>总排序轮数 = 元素个数 - 1</p>\n</li>\n<li>\n<p>内层循环对比次数 = 元素个数 - 当前轮数 - 1</p>\n</li>\n</ul>\n<h3 id=\"53-二维数组\"><a class=\"anchor\" href=\"#53-二维数组\">#</a> 5.3 二维数组</h3>\n<h4 id=\"531-二维数组定义方式\"><a class=\"anchor\" href=\"#531-二维数组定义方式\">#</a> 5.3.1 二维数组定义方式</h4>\n<p>四种定义方式：</p>\n<ol>\n<li>\n<p><code>数据类型 数组名[行数][列数];</code></p>\n</li>\n<li>\n<p><code>数据类型 数组名[行数][列数]=&#123;&#123;数据1,数据2&#125;,&#123;数据3,数据4&#125;&#125;;</code></p>\n</li>\n<li>\n<p><code>数据类型 数组名[行数][列数]=&#123;数据1,数据2,数据3,数据4&#125;;</code></p>\n</li>\n<li>\n<p><code>数据类型 数组名[ ][列数]=&#123;数据1,数据2,数据3,数据4&#125;;</code></p>\n</li>\n</ol>\n<h4 id=\"532-二维数组数组名\"><a class=\"anchor\" href=\"#532-二维数组数组名\">#</a> 5.3.2 二维数组数组名</h4>\n<p>用途：</p>\n<ol>\n<li>\n<p>查看二位数据所占用内存空间  <code>sizeof(数组名)</code></p>\n</li>\n<li>\n<p>获取二维数组首地址  <code>cout &lt;&lt; 数组名</code></p>\n</li>\n</ol>\n<h2 id=\"6函数\"><a class=\"anchor\" href=\"#6函数\">#</a> 6. 函数</h2>\n<h3 id=\"61-概述\"><a class=\"anchor\" href=\"#61-概述\">#</a> 6.1 概述</h3>\n<p>作用： 将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"62-函数的定义\"><a class=\"anchor\" href=\"#62-函数的定义\">#</a> 6.2 函数的定义</h3>\n<p>函数的定义一般主要有五个步骤：</p>\n<ol>\n<li>\n<p>返回值类型</p>\n</li>\n<li>\n<p>函数名</p>\n</li>\n<li>\n<p>参数表列</p>\n</li>\n<li>\n<p>函数体语句</p>\n</li>\n<li>\n<p>return 表达式</p>\n</li>\n</ol>\n<h3 id=\"63-函数的调用\"><a class=\"anchor\" href=\"#63-函数的调用\">#</a> 6.3 函数的调用</h3>\n<p>功能：使用定义好的函数</p>\n<p>语法： <code>函数名(参数)</code></p>\n<h3 id=\"64-值传递\"><a class=\"anchor\" href=\"#64-值传递\">#</a> 6.4 值传递</h3>\n<ul>\n<li>\n<p>值传递：函数调用时实参将数值传入给形参</p>\n</li>\n<li>\n<p>值传递时，如果形参发生改变，并不会影响实参</p>\n</li>\n</ul>\n<h3 id=\"65-函数的常见样式\"><a class=\"anchor\" href=\"#65-函数的常见样式\">#</a> 6.5 函数的常见样式</h3>\n<ol>\n<li>\n<p>无参无返</p>\n</li>\n<li>\n<p>有参无返</p>\n</li>\n<li>\n<p>无参有返</p>\n</li>\n<li>\n<p>有参有返</p>\n</li>\n</ol>\n<h3 id=\"66-函数的声明\"><a class=\"anchor\" href=\"#66-函数的声明\">#</a> 6.6 函数的声明</h3>\n<p>作用：告诉编译器函数名称以及如何调用函数。函数的实际主题可以单独定义</p>\n<ul>\n<li>函数的声明可以很多次 (没有必要)，但是函数的定义只能有一次</li>\n</ul>\n<p>示例： <code>int max(int a, int b);</code></p>\n<h3 id=\"67-函数的份文件编写\"><a class=\"anchor\" href=\"#67-函数的份文件编写\">#</a> 6.7 函数的份文件编写</h3>\n<p>作用：让代码结构更加清晰</p>\n<p>一般四个步骤：</p>\n<ol>\n<li>\n<p>创建后缀名为 .h 的头文件</p>\n</li>\n<li>\n<p>创建后缀名为 .cpp 的源文件</p>\n</li>\n<li>\n<p>在头文件中写函数的声明，包含 <code>include&lt;iostream&gt;</code>  和 <code>using namespace std;</code></p>\n</li>\n<li>\n<p>在源文件中写函数的定义，关联头文件 <code>include &quot;头文件名&quot;</code></p>\n</li>\n</ol>\n<h2 id=\"7指针\"><a class=\"anchor\" href=\"#7指针\">#</a> 7. 指针</h2>\n<h3 id=\"71-指针的基本概念\"><a class=\"anchor\" href=\"#71-指针的基本概念\">#</a> 7.1 指针的基本概念</h3>\n<p>指针的作用：可以通过指针间接访问内存</p>\n<ul>\n<li>\n<p>内存编号是从 0 开始记录的，一般用十六进制数字表示</p>\n</li>\n<li>\n<p>可以利用指针变量保存地址</p>\n</li>\n</ul>\n<h3 id=\"72-指针变量的定义和使用\"><a class=\"anchor\" href=\"#72-指针变量的定义和使用\">#</a> 7.2 指针变量的定义和使用</h3>\n<p>指针变量定义语法： <code>数据类型 *变量名;</code></p>\n<p>使用：通过解引用的方式来找到指针指向的内存，如 <code>*p</code></p>\n<h3 id=\"73-指针所占用内存空间\"><a class=\"anchor\" href=\"#73-指针所占用内存空间\">#</a> 7.3 指针所占用内存空间</h3>\n<p>在 32 位操作系统下：占用 4 个字节空间</p>\n<p>在 64 位操作系统下：占用 8 个字节空间</p>\n<h3 id=\"74-空指针和野指针\"><a class=\"anchor\" href=\"#74-空指针和野指针\">#</a> 7.4 空指针和野指针</h3>\n<p>空指针：指针变量指向内存中编号为 0 的空间</p>\n<p>用途：初始化指针变量</p>\n<p>注意：空指针指向的内存是<strong>不可以</strong>访问的（0~255 之间的内存编号是系统占用的）</p>\n<p>野指针：指针变量指向非法的内存空间</p>\n<blockquote>\n<p>在程序中，尽量避免出现野指针</p>\n</blockquote>\n<h3 id=\"75-const修饰指针\"><a class=\"anchor\" href=\"#75-const修饰指针\">#</a> 7.5 const 修饰指针</h3>\n<p>const 修饰指针有三种情况：</p>\n<ol>\n<li>\n<p>const 修饰指针 --- 常量指针</p>\n</li>\n<li>\n<p>const 修饰常量 --- 指针常量</p>\n</li>\n<li>\n<p>const 既修饰指针，又修饰常量</p>\n</li>\n</ol>\n<p>常量指针： <code>const int *p = &amp;a;</code></p>\n<blockquote>\n<p>指针的指向可以修改，但是指针指向的值不可以修改</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> *p = 20; 错误，指针指向的值不可以修改</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> p = &amp;b; 正确，指针的指向可以修改</label></p>\n</li>\n</ul>\n<p>指针常量： <code>int * const p = &amp;a;</code></p>\n<blockquote>\n<p>指针的指向不可以修改，指针指向的值可以修改</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> *p = 20; 正确，指针指向的值可以修改</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> p = &amp;b; 错误，指针的指向不可以修改</label></p>\n</li>\n</ul>\n<p>const 既修饰指针，又修饰常量： <code>const int * const p = &amp;a;</code></p>\n<blockquote>\n<p>指针的指向和指针的值都不可以修改</p>\n</blockquote>\n<p>上述两种操作都是错误的</p>\n<h3 id=\"76-指针和数组\"><a class=\"anchor\" href=\"#76-指针和数组\">#</a> 7.6 指针和数组</h3>\n<p>利用指针访问数组中元素</p>\n<p>数组名本身就是一个指针</p>\n<h3 id=\"77-指针和函数\"><a class=\"anchor\" href=\"#77-指针和函数\">#</a> 7.7 指针和函数</h3>\n<p>作用：利用指针作函数参数，可以修改实参的值</p>\n<blockquote>\n<p>地址传递</p>\n</blockquote>\n<h3 id=\"78-指针-数组-函数\"><a class=\"anchor\" href=\"#78-指针-数组-函数\">#</a> 7.8 指针、数组、函数</h3>\n<p>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n",
            "tags": []
        },
        {
            "id": "https://killer1214.github.io/2023/04/03/hello-world/",
            "url": "https://killer1214.github.io/2023/04/03/hello-world/",
            "title": "Hello World",
            "date_published": "2023-04-03T08:05:31.632Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}