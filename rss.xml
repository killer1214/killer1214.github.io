<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>illusory&#39;s room</title>
        <link>https://killer1214.github.io</link>
        <description>Starlight spread the universe</description>
        <language>zh</language>
        <pubDate>Mon, 03 Apr 2023 21:14:48 +0800</pubDate>
        <lastBuildDate>Mon, 03 Apr 2023 21:14:48 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://killer1214.github.io/2023/04/03/c-base-learn/</guid>
            <title>c++base_learn</title>
            <link>https://killer1214.github.io/2023/04/03/c-base-learn/</link>
            <pubDate>Mon, 03 Apr 2023 21:14:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c基础&#34;&gt;#&lt;/a&gt; c++ 基础&lt;/h1&gt;
&lt;h2 id=&#34;1c了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1c了解&#34;&gt;#&lt;/a&gt; 1.c++ 了解&lt;/h2&gt;
&lt;h2 id=&#34;2数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2数据类型&#34;&gt;#&lt;/a&gt; 2. 数据类型&lt;/h2&gt;
&lt;h3 id=&#34;25-转义字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25-转义字符&#34;&gt;#&lt;/a&gt; 2.5 转义字符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\t 水平制表（HT）（跳到下一个 tab 位置，一个 tab 占 8 个位置）009&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\n 换行（LF）010&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\r 回车（CR）回到当前行开头 013&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;26字符串型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#26字符串型&#34;&gt;#&lt;/a&gt; 2.6 字符串型&lt;/h3&gt;
&lt;p&gt;作用：表示一串字符&lt;/p&gt;
&lt;h4 id=&#34;1c风格字符串char-变量名-字符串值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1c风格字符串char-变量名-字符串值&#34;&gt;#&lt;/a&gt; 1.C 风格字符串： &lt;code&gt;char 变量名[] = &amp;quot;字符串值&amp;quot;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;例如： &lt;code&gt;char str1[] = &amp;quot;hello,world&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;2c风格字符串string-变量名-字符串值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2c风格字符串string-变量名-字符串值&#34;&gt;#&lt;/a&gt; 2.c++ 风格字符串： &lt;code&gt;string 变量名 = &amp;quot;字符串值&amp;quot;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;例如： &lt;code&gt;string str2 = &amp;quot;hello world&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：需要包含头文件 &lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;27布尔类型bool&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#27布尔类型bool&#34;&gt;#&lt;/a&gt; 2.7 布尔类型 bool&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：布尔数据类型代表真或假的值&lt;/p&gt;
&lt;p&gt;bool 类型只有两个值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;true ----- 真（本质是 1）// 非零值都代表真&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;false----- 假（本质是 0）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bool 类型占 1 个字节大小&lt;/p&gt;
&lt;p&gt;示例： &lt;code&gt;bool flag = true;//true代表真，此时flag==1&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;28数据的输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#28数据的输入&#34;&gt;#&lt;/a&gt; 2.8 数据的输入&lt;/h3&gt;
&lt;p&gt;作用：从键盘获取数据&lt;/p&gt;
&lt;p&gt;关键字：cin&lt;/p&gt;
&lt;p&gt;语法： &lt;code&gt;cin &amp;gt;&amp;gt; 变量&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;3运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3运算符&#34;&gt;#&lt;/a&gt; 3. 运算符&lt;/h2&gt;
&lt;p&gt;作用：用于执行代码的运算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符类型&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;算数运算符&lt;/td&gt;
&lt;td&gt;处理四则运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;赋值运算符&lt;/td&gt;
&lt;td&gt;将表达式的值赋给变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较运算符&lt;/td&gt;
&lt;td&gt;表达式的比较，并返回一个真值或假值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑运算符&lt;/td&gt;
&lt;td&gt;根据表达式的值返回真值或假值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;31算数运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31算数运算符&#34;&gt;#&lt;/a&gt; 3.1 算数运算符&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;术语&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;正号&lt;/td&gt;
&lt;td&gt;+3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;负号&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;加&lt;/td&gt;
&lt;td&gt;2+3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;减&lt;/td&gt;
&lt;td&gt;5-2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘&lt;/td&gt;
&lt;td&gt;2*3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除以&lt;/td&gt;
&lt;td&gt;10/5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取模（取余）&lt;/td&gt;
&lt;td&gt;10%3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;前置递增&lt;/td&gt;
&lt;td&gt;a=2;b=++a;&lt;/td&gt;
&lt;td&gt;a=3;b=3;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;后置递增&lt;/td&gt;
&lt;td&gt;a=2;b=a++;&lt;/td&gt;
&lt;td&gt;a=3;b=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;前置递减&lt;/td&gt;
&lt;td&gt;a=2;b=–a;&lt;/td&gt;
&lt;td&gt;a=1;b=1;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;后置递减&lt;/td&gt;
&lt;td&gt;a=2;b=a–;&lt;/td&gt;
&lt;td&gt;a=1;b=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;两个整数相除，结果依然是&lt;strong&gt;整数&lt;/strong&gt;，将小数部分去除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除数不能是 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小数除法运算，结果优先显示为整数（小数部分为零时省略显示）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个小数不允许做取模运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前置：先对变量处理，然后进行表达式运算；后置：先进行表达式运算，然后对变量处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32赋值运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32赋值运算符&#34;&gt;#&lt;/a&gt; 3.2 赋值运算符&lt;/h3&gt;
&lt;p&gt;作用：将表达式的值赋给变量&lt;/p&gt;
&lt;p&gt;运算符： &lt;code&gt;=，+=，-=，*=，/=，%=&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;33比较运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33比较运算符&#34;&gt;#&lt;/a&gt; 3.3 比较运算符&lt;/h3&gt;
&lt;p&gt;作用：用于表达式的比较，并返回一个真值（1）或假值（0）&lt;/p&gt;
&lt;p&gt;运算符： &lt;code&gt;==，!=，&amp;lt;，&amp;gt;，&amp;lt;=，&amp;gt;=&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;34逻辑运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#34逻辑运算符&#34;&gt;#&lt;/a&gt; 3.4 逻辑运算符&lt;/h3&gt;
&lt;p&gt;作用：用于根据表达式的值返回真值或假值&lt;/p&gt;
&lt;p&gt;运算符： &lt;code&gt;!,&amp;amp;&amp;amp;,||&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;4程序流程结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4程序流程结构&#34;&gt;#&lt;/a&gt; 4. 程序流程结构&lt;/h2&gt;
&lt;p&gt;顺序结构，选择结构，循环结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序结构：程序顺序执行，不发生跳转&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择结构：依据条件是否满足，有选择 的执行相应功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环结构：依据条件是否满足，循环多次执行某段代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41选择结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41选择结构&#34;&gt;#&lt;/a&gt; 4.1 选择结构&lt;/h3&gt;
&lt;h4 id=&#34;411-if语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#411-if语句&#34;&gt;#&lt;/a&gt; 4.1.1 if 语句&lt;/h4&gt;
&lt;p&gt;if 语句的三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单行格式 if 语句（无 else）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行格式 if 语句（有 else）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多条件的 if 语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;412三目运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#412三目运算符&#34;&gt;#&lt;/a&gt; 4.1.2 三目运算符&lt;/h4&gt;
&lt;p&gt;作用：通过三目运算符实现简单的判断&lt;/p&gt;
&lt;p&gt;语法： &lt;code&gt;表达式1?表达式2:表达式3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果表达式 1 为&lt;strong&gt;真&lt;/strong&gt;，则执行&lt;strong&gt;表达式 2&lt;/strong&gt;，并返回表达式 2 的结果&lt;/p&gt;
&lt;p&gt;如果表达式 1 为&lt;strong&gt;假&lt;/strong&gt;，则执行&lt;strong&gt;表达式 3&lt;/strong&gt;，并返回表达式 3 的结果&lt;/p&gt;
&lt;p&gt;补充：在 C++ 中三目运算符返回的是变量，可以继续赋值&lt;/p&gt;
&lt;p&gt;例如： &lt;code&gt;(a &amp;gt; b ? a : b) = 100&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;413switch语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#413switch语句&#34;&gt;#&lt;/a&gt; 4.1.3switch 语句&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(表达式)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; 结果&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:执行语句;&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; 结果&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:执行语句;&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:执行语句;&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：case 里如果没有 break，那么程序会一直向下执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;if 和 switch 区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;switch 缺点，判断的时候只能是整型或者字符型，不可以是一个区间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switch 优点，结构清晰执行效率高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42循环结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42循环结构&#34;&gt;#&lt;/a&gt; 4.2 循环结构&lt;/h3&gt;
&lt;h4 id=&#34;421while循环语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#421while循环语句&#34;&gt;#&lt;/a&gt; 4.2.1while 循环语句&lt;/h4&gt;
&lt;p&gt;语法： &lt;code&gt;while(循环条件)&amp;#123;循环语句&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只要循环条件结果为真，就执行循环语句&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//依据当前系统时间来添加随机数种子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;srand&lt;/span&gt;((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;span class=&#34;built_in&#34;&gt;time&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;));&lt;span class=&#34;comment&#34;&gt;//需要ctime头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;built_in&#34;&gt;rand&lt;/span&gt;() % &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//生成1~100随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;422-dowhile循环语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#422-dowhile循环语句&#34;&gt;#&lt;/a&gt; 4.2.2 do…while 循环语句&lt;/h4&gt;
&lt;p&gt;语法： &lt;code&gt;do&amp;#123;循环语句&amp;#125;while(循环条件)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：与 while 的区别在于 do…while 会先执行一次循环语句，再判断循环条件&lt;/p&gt;
&lt;h4 id=&#34;423-for循环语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#423-for循环语句&#34;&gt;#&lt;/a&gt; 4.2.3 for 循环语句&lt;/h4&gt;
&lt;p&gt;语法： &lt;code&gt;for(起始表达式;条件表达式;末尾循环体)&amp;#123;循环语句&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*敲桌子，1~100内，各位7(mod10=7)，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;十位7(/10 = 7)，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;或者是7的倍数(mod7=0)，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;则输出敲桌子*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i &amp;lt;= &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i%&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;||i%&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;==&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;||i/&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;==&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;敲桌子&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;424嵌套循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#424嵌套循环&#34;&gt;#&lt;/a&gt; 4.2.4 嵌套循环&lt;/h4&gt;
&lt;h3 id=&#34;43跳转语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43跳转语句&#34;&gt;#&lt;/a&gt; 4.3 跳转语句&lt;/h3&gt;
&lt;h4 id=&#34;431-break语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#431-break语句&#34;&gt;#&lt;/a&gt; 4.3.1 break 语句&lt;/h4&gt;
&lt;p&gt;作用：跳出选择结构或者循环结构&lt;/p&gt;
&lt;p&gt;break 使用的时机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;switch 条件语句中，终止 case 并跳出 switch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环语句中，跳出当前的循环语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;嵌套循环中，跳出最近的内层循环语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;432-continue语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#432-continue语句&#34;&gt;#&lt;/a&gt; 4.3.2 continue 语句&lt;/h4&gt;
&lt;p&gt;作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环&lt;/p&gt;
&lt;h4 id=&#34;433-goto语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#433-goto语句&#34;&gt;#&lt;/a&gt; 4.3.3 goto 语句&lt;/h4&gt;
&lt;p&gt;作用：可以&lt;strong&gt;无条件&lt;/strong&gt;跳转语句&lt;/p&gt;
&lt;p&gt;语法： &lt;code&gt;goto 标记;&lt;/code&gt; (标记习惯用全大写)&lt;/p&gt;
&lt;p&gt;解释：如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; FLAG;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FLAG:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;5-数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-数组&#34;&gt;#&lt;/a&gt; 5 数组&lt;/h2&gt;
&lt;h3 id=&#34;51-概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51-概述&#34;&gt;#&lt;/a&gt; 5.1 概述&lt;/h3&gt;
&lt;p&gt;数组，就是一个集合，里面存放了相同类型的数据元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点 1&lt;/strong&gt;：数组中的每个数据元素都是相同的数据类型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点 2&lt;/strong&gt;：数组是由连续的内存位置组成的&lt;/p&gt;
&lt;h3 id=&#34;52-一维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#52-一维数组&#34;&gt;#&lt;/a&gt; 5.2 一维数组&lt;/h3&gt;
&lt;h4 id=&#34;521-一维数组定义方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#521-一维数组定义方式&#34;&gt;#&lt;/a&gt; 5.2.1 一维数组定义方式&lt;/h4&gt;
&lt;p&gt;三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[数组长度];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[数组长度] = &amp;#123;值1, 值2...&amp;#125;;&lt;/code&gt; (没有全部初始化的后续空间会用 0 填补)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[] = &amp;#123;值1, 值2...&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;522-一维数组数组名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#522-一维数组数组名&#34;&gt;#&lt;/a&gt; 5.2.2 一维数组数组名&lt;/h4&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;统计整个数组在内存中的长度 &lt;code&gt;sizeof(数组名)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取数组在内存中的首地址 &lt;code&gt;cout &amp;lt;&amp;lt; 数组名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;523-冒泡排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#523-冒泡排序&#34;&gt;#&lt;/a&gt; 5.2.3 冒泡排序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总排序轮数 = 元素个数 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内层循环对比次数 = 元素个数 - 当前轮数 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-二维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#53-二维数组&#34;&gt;#&lt;/a&gt; 5.3 二维数组&lt;/h3&gt;
&lt;h4 id=&#34;531-二维数组定义方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#531-二维数组定义方式&#34;&gt;#&lt;/a&gt; 5.3.1 二维数组定义方式&lt;/h4&gt;
&lt;p&gt;四种定义方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[行数][列数];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[行数][列数]=&amp;#123;&amp;#123;数据1,数据2&amp;#125;,&amp;#123;数据3,数据4&amp;#125;&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[行数][列数]=&amp;#123;数据1,数据2,数据3,数据4&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数据类型 数组名[ ][列数]=&amp;#123;数据1,数据2,数据3,数据4&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;532-二维数组数组名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#532-二维数组数组名&#34;&gt;#&lt;/a&gt; 5.3.2 二维数组数组名&lt;/h4&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看二位数据所占用内存空间  &lt;code&gt;sizeof(数组名)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取二维数组首地址  &lt;code&gt;cout &amp;lt;&amp;lt; 数组名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6函数&#34;&gt;#&lt;/a&gt; 6. 函数&lt;/h2&gt;
&lt;h3 id=&#34;61-概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#61-概述&#34;&gt;#&lt;/a&gt; 6.1 概述&lt;/h3&gt;
&lt;p&gt;作用： 将一段经常使用的代码封装起来，减少重复代码&lt;/p&gt;
&lt;p&gt;一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。&lt;/p&gt;
&lt;h3 id=&#34;62-函数的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#62-函数的定义&#34;&gt;#&lt;/a&gt; 6.2 函数的定义&lt;/h3&gt;
&lt;p&gt;函数的定义一般主要有五个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;返回值类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数表列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数体语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;return 表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;63-函数的调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#63-函数的调用&#34;&gt;#&lt;/a&gt; 6.3 函数的调用&lt;/h3&gt;
&lt;p&gt;功能：使用定义好的函数&lt;/p&gt;
&lt;p&gt;语法： &lt;code&gt;函数名(参数)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;64-值传递&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#64-值传递&#34;&gt;#&lt;/a&gt; 6.4 值传递&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;值传递：函数调用时实参将数值传入给形参&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;值传递时，如果形参发生改变，并不会影响实参&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;65-函数的常见样式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#65-函数的常见样式&#34;&gt;#&lt;/a&gt; 6.5 函数的常见样式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;无参无返&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有参无返&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无参有返&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有参有返&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;66-函数的声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#66-函数的声明&#34;&gt;#&lt;/a&gt; 6.6 函数的声明&lt;/h3&gt;
&lt;p&gt;作用：告诉编译器函数名称以及如何调用函数。函数的实际主题可以单独定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数的声明可以很多次 (没有必要)，但是函数的定义只能有一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例： &lt;code&gt;int max(int a, int b);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;67-函数的份文件编写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#67-函数的份文件编写&#34;&gt;#&lt;/a&gt; 6.7 函数的份文件编写&lt;/h3&gt;
&lt;p&gt;作用：让代码结构更加清晰&lt;/p&gt;
&lt;p&gt;一般四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建后缀名为 .h 的头文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建后缀名为 .cpp 的源文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在头文件中写函数的声明，包含 &lt;code&gt;include&amp;lt;iostream&amp;gt;&lt;/code&gt;  和 &lt;code&gt;using namespace std;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在源文件中写函数的定义，关联头文件 &lt;code&gt;include &amp;quot;头文件名&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7指针&#34;&gt;#&lt;/a&gt; 7. 指针&lt;/h2&gt;
&lt;h3 id=&#34;71-指针的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#71-指针的基本概念&#34;&gt;#&lt;/a&gt; 7.1 指针的基本概念&lt;/h3&gt;
&lt;p&gt;指针的作用：可以通过指针间接访问内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存编号是从 0 开始记录的，一般用十六进制数字表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以利用指针变量保存地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;72-指针变量的定义和使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#72-指针变量的定义和使用&#34;&gt;#&lt;/a&gt; 7.2 指针变量的定义和使用&lt;/h3&gt;
&lt;p&gt;指针变量定义语法： &lt;code&gt;数据类型 *变量名;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用：通过解引用的方式来找到指针指向的内存，如 &lt;code&gt;*p&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;73-指针所占用内存空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#73-指针所占用内存空间&#34;&gt;#&lt;/a&gt; 7.3 指针所占用内存空间&lt;/h3&gt;
&lt;p&gt;在 32 位操作系统下：占用 4 个字节空间&lt;/p&gt;
&lt;p&gt;在 64 位操作系统下：占用 8 个字节空间&lt;/p&gt;
&lt;h3 id=&#34;74-空指针和野指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#74-空指针和野指针&#34;&gt;#&lt;/a&gt; 7.4 空指针和野指针&lt;/h3&gt;
&lt;p&gt;空指针：指针变量指向内存中编号为 0 的空间&lt;/p&gt;
&lt;p&gt;用途：初始化指针变量&lt;/p&gt;
&lt;p&gt;注意：空指针指向的内存是&lt;strong&gt;不可以&lt;/strong&gt;访问的（0~255 之间的内存编号是系统占用的）&lt;/p&gt;
&lt;p&gt;野指针：指针变量指向非法的内存空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在程序中，尽量避免出现野指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;75-const修饰指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#75-const修饰指针&#34;&gt;#&lt;/a&gt; 7.5 const 修饰指针&lt;/h3&gt;
&lt;p&gt;const 修饰指针有三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;const 修饰指针 — 常量指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;const 修饰常量 — 指针常量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;const 既修饰指针，又修饰常量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常量指针： &lt;code&gt;const int *p = &amp;amp;a;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指针的指向可以修改，但是指针指向的值不可以修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt; *p = 20; 错误，指针指向的值不可以修改&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt; p = &amp;amp;b; 正确，指针的指向可以修改&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指针常量： &lt;code&gt;int * const p = &amp;amp;a;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指针的指向不可以修改，指针指向的值可以修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_2&#34;&gt; *p = 20; 正确，指针指向的值可以修改&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_3&#34;&gt; p = &amp;amp;b; 错误，指针的指向不可以修改&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;const 既修饰指针，又修饰常量： &lt;code&gt;const int * const p = &amp;amp;a;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指针的指向和指针的值都不可以修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述两种操作都是错误的&lt;/p&gt;
&lt;h3 id=&#34;76-指针和数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#76-指针和数组&#34;&gt;#&lt;/a&gt; 7.6 指针和数组&lt;/h3&gt;
&lt;p&gt;利用指针访问数组中元素&lt;/p&gt;
&lt;p&gt;数组名本身就是一个指针&lt;/p&gt;
&lt;h3 id=&#34;77-指针和函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#77-指针和函数&#34;&gt;#&lt;/a&gt; 7.7 指针和函数&lt;/h3&gt;
&lt;p&gt;作用：利用指针作函数参数，可以修改实参的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;地址传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;78-指针-数组-函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#78-指针-数组-函数&#34;&gt;#&lt;/a&gt; 7.8 指针、数组、函数&lt;/h3&gt;
&lt;p&gt;封装一个函数，利用冒泡排序，实现对整型数组的升序排序&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://killer1214.github.io/2023/04/03/hello-world/</guid>
            <title>Hello World</title>
            <link>https://killer1214.github.io/2023/04/03/hello-world/</link>
            <pubDate>Mon, 03 Apr 2023 16:05:31 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
